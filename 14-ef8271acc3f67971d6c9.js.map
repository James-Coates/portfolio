{"version":3,"sources":["webpack:///./node_modules/ityped/src/index.js","webpack:///./node_modules/@glidejs/glide/dist/glide.esm.js"],"names":["__webpack_require__","d","__webpack_exports__","init","element","properties","l","STRINGS_TO_ITERATE","props","strings","i","typewrite","loop","setTimeout","typeString","startDelay","str","index","strLen","length","intervalID","setInterval","placeholder","textContent","onStringTyped","typeSpeed","id","clearInterval","disableBackTyping","onFinished","eraseString","backDelay","substr","onStringErased","backSpeed","_ref","_ref$strings","_ref$typeSpeed","_ref$backSpeed","_ref$backDelay","_ref$startDelay","_ref$cursorChar","cursorChar","_ref$placeholder","_ref$showCursor","showCursor","_ref$disableBackTypin","_ref$onFinished","_ref$loop","setProps","document","querySelector","cursorSpan","createElement","classList","add","insertAdjacentElement","setCursor","defaults","type","startAt","perView","focusAt","gap","autoplay","hoverpause","keyboard","bound","swipeThreshold","dragThreshold","perTouch","touchRatio","touchAngle","animationDuration","rewind","rewindDuration","animationTimingFunc","throttle","direction","peek","breakpoints","classes","ltr","rtl","slider","carousel","swipeable","dragging","cloneSlide","activeNav","activeSlide","disabledArrow","warn","msg","console","error","_typeof","Symbol","iterator","obj","constructor","prototype","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","_extends","assign","arguments","source","hasOwnProperty","call","possibleConstructorReturn","self","ReferenceError","toInt","value","parseInt","isString","isObject","isFunction","isUndefined","isArray","Array","define","prop","definition","mergeOptions","settings","options","EventsBus","events","undefined","this","hop","event","handler","on","push","remove","context","emit","forEach","item","Glide","selector","_c","_t","_e","disabled","extensions","glide","components","name","_name","mount","transformers","pattern","Run","make","distance","Transition","disable","Move","interval","get","_o","set","o","_i","_d","status","now","Date","getTime","func","wait","timeout","args","result","previous","later","leading","apply","throttled","at","remaining","clearTimeout","trailing","cancel","MARGIN_TYPE","siblings","node","parentNode","n","firstChild","matched","nextSibling","nodeType","exist","window","HTMLElement","TRACK_SELECTOR","EventsBinder","listeners","el","closure","capture","addEventListener","removeEventListener","VALID_DIRECTIONS","FLIPED_MOVEMENTS",">","<","=","Rtl","Components","modify","translate","Direction","is","Gap","Gaps","Grow","Clones","grow","Peeking","Peek","before","Focusing","width","Sizes","slideWidth","supportsPassive","opts","e","supportsPassive$1","START_EVENTS","MOVE_EVENTS","END_EVENTS","MOUSE_EVENTS","NAV_SELECTOR","CONTROLS_SELECTOR","sortBreakpoints","points","keys","sort","reduce","r","k","COMPONENTS","Html","root","track","slides","slice","wrapper","children","filter","slide","contains","_r","t","Translate","Events","transform","TRANSFORMERS","concat","mutate","transformer","mutator","style","isType","isOffset","after","movement","compose","property","duration","transition","callback","enable","offset","resolve","token","split","join","addClass","removeClass","_v","indexOf","setupSlides","setupWrapper","dimention","wrapperSize","offsetWidth","reductor","len","marginLeft","marginRight","_this","items","collect","_Glide$settings","part","start","end","Math","max","floor","clone","cloneNode","_clone","unshift","append","_Components$Html","half","prepend","reverse","appendChild","_i2","insertBefore","_i3","removeChild","Resize","Binder","bind","unbind","off","destroy","Build","typeClass","activeClass","sibling","removeClasses","move","calculate","isStart","isEnd","steps","countableSteps","min","_m","step","Swipe","swipeSin","swipeStartX","swipeStartY","passive","bindSwipeStart","swipe","touches","pageX","pageY","bindSwipeMove","bindSwipeEnd","subExSx","subEySy","powEX","abs","powEY","swipeHypotenuse","sqrt","swipeCathetus","asin","PI","stopPropagation","parseFloat","threshold","swipeDistance","swipeDeg","round","unbindSwipeMove","unbindSwipeEnd","unbindSwipeStart","_this2","_this3","changedTouches","Images","dragstart","preventDefault","Anchors","detached","prevented","_a","querySelectorAll","click","detach","draggable","setAttribute","getAttribute","removeAttribute","attach","Controls","_n","addBindings","setActive","removeActive","controls","removeBindings","elements","currentTarget","Keyboard","press","keyCode","Autoplay","stop","time","Breakpoints","match","matchMedia","point","matches","Glide$1","_Core","Glide$$1","__proto__","getPrototypeOf","subClass","superClass","create","setPrototypeOf","inherits","object","receiver","Function","desc","getOwnPropertyDescriptor","parent","getter"],"mappings":"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","file":"14-ef8271acc3f67971d6c9.js","sourcesContent":["/**\n * @name setProps\n * @description Set the ityped properties configuration\n * @param {Object} config The configuration properties\n * @return {Promise}\n */\nvar setProps = function setProps(_ref) {\n  var _ref$strings = _ref.strings,\n      strings = _ref$strings === void 0 ? ['Put your strings here...', 'and Enjoy!'] : _ref$strings,\n      _ref$typeSpeed = _ref.typeSpeed,\n      typeSpeed = _ref$typeSpeed === void 0 ? 100 : _ref$typeSpeed,\n      _ref$backSpeed = _ref.backSpeed,\n      backSpeed = _ref$backSpeed === void 0 ? 50 : _ref$backSpeed,\n      _ref$backDelay = _ref.backDelay,\n      backDelay = _ref$backDelay === void 0 ? 500 : _ref$backDelay,\n      _ref$startDelay = _ref.startDelay,\n      startDelay = _ref$startDelay === void 0 ? 500 : _ref$startDelay,\n      _ref$cursorChar = _ref.cursorChar,\n      cursorChar = _ref$cursorChar === void 0 ? '|' : _ref$cursorChar,\n      _ref$placeholder = _ref.placeholder,\n      placeholder = _ref$placeholder === void 0 ? false : _ref$placeholder,\n      _ref$showCursor = _ref.showCursor,\n      showCursor = _ref$showCursor === void 0 ? true : _ref$showCursor,\n      _ref$disableBackTypin = _ref.disableBackTyping,\n      disableBackTyping = _ref$disableBackTypin === void 0 ? false : _ref$disableBackTypin,\n      _ref$onFinished = _ref.onFinished,\n      onFinished = _ref$onFinished === void 0 ? function () {} : _ref$onFinished,\n      _ref$loop = _ref.loop,\n      loop = _ref$loop === void 0 ? true : _ref$loop;\n  return {\n    strings: strings,\n    typeSpeed: typeSpeed,\n    backSpeed: backSpeed,\n    cursorChar: cursorChar,\n    backDelay: backDelay,\n    placeholder: placeholder,\n    startDelay: startDelay,\n    showCursor: showCursor,\n    loop: loop,\n    disableBackTyping: disableBackTyping,\n    onFinished: onFinished\n  };\n};\n\nexport var init = function init(element, properties) {\n  var i = 0,\n      l,\n      STRINGS_TO_ITERATE;\n\n  var typewrite = function typewrite(strings, props) {\n    if (i === l) if (props.loop) i = 0;\n    setTimeout(function () {\n      typeString(strings[i], props);\n    }, props.startDelay);\n  };\n\n  var typeString = function typeString(str, props) {\n    var index = 0,\n        strLen = str.length;\n    var intervalID = setInterval(function () {\n      props.placeholder ? element.placeholder += str[index] : element.textContent += str[index];\n      if (++index === strLen) return onStringTyped(intervalID, props);\n    }, props.typeSpeed);\n  };\n\n  var onStringTyped = function onStringTyped(id, props) {\n    clearInterval(id);\n\n    if (props.disableBackTyping && i === l - 1) {\n      return props.onFinished();\n    }\n\n    if (!props.loop && i === l - 1) {\n      return props.onFinished();\n    }\n\n    setTimeout(function () {\n      return eraseString(props);\n    }, props.backDelay);\n  };\n\n  var eraseString = function eraseString(props) {\n    var str = props.placeholder ? element.placeholder : element.textContent,\n        strLen = str.length;\n    var intervalID = setInterval(function () {\n      props.placeholder ? element.placeholder = element.placeholder.substr(0, --strLen) : element.textContent = str.substr(0, --strLen);\n      if (strLen === 0) return onStringErased(intervalID, props);\n    }, props.backSpeed);\n  };\n\n  var onStringErased = function onStringErased(id, props) {\n    clearInterval(id);\n    ++i;\n    typewrite(STRINGS_TO_ITERATE, props);\n  };\n\n  var setCursor = function setCursor(element, props) {\n    var cursorSpan = document.createElement('span');\n    cursorSpan.classList.add('ityped-cursor');\n    cursorSpan.textContent = '|';\n    cursorSpan.textContent = props.cursorChar;\n    element.insertAdjacentElement('afterend', cursorSpan);\n  };\n\n  var startTyping = function startTyping(prop) {\n    var props = setProps(prop || {});\n    var strings = props.strings;\n    STRINGS_TO_ITERATE = strings;\n    l = strings.length;\n    if (typeof element === \"string\") element = document.querySelector(element);\n    if (props.showCursor) setCursor(element, props);\n    typewrite(strings, props);\n  };\n\n  return startTyping(properties);\n};","import \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.function.bind\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.array.reduce\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.object.set-prototype-of\";\nimport \"core-js/modules/es6.object.create\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es6.object.define-property\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\n\n/*!\n * Glide.js v3.4.1\n * (c) 2013-2019 Jędrzej Chałubek <jedrzej.chalubek@gmail.com> (http://jedrzejchalubek.com/)\n * Released under the MIT License.\n */\nvar defaults = {\n  /**\n   * Type of the movement.\n   *\n   * Available types:\n   * `slider` - Rewinds slider to the start/end when it reaches the first or last slide.\n   * `carousel` - Changes slides without starting over when it reaches the first or last slide.\n   *\n   * @type {String}\n   */\n  type: 'slider',\n\n  /**\n   * Start at specific slide number defined with zero-based index.\n   *\n   * @type {Number}\n   */\n  startAt: 0,\n\n  /**\n   * A number of slides visible on the single viewport.\n   *\n   * @type {Number}\n   */\n  perView: 1,\n\n  /**\n   * Focus currently active slide at a specified position in the track.\n   *\n   * Available inputs:\n   * `center` - Current slide will be always focused at the center of a track.\n   * `0,1,2,3...` - Current slide will be focused on the specified zero-based index.\n   *\n   * @type {String|Number}\n   */\n  focusAt: 0,\n\n  /**\n   * A size of the gap added between slides.\n   *\n   * @type {Number}\n   */\n  gap: 10,\n\n  /**\n   * Change slides after a specified interval. Use `false` for turning off autoplay.\n   *\n   * @type {Number|Boolean}\n   */\n  autoplay: false,\n\n  /**\n   * Stop autoplay on mouseover event.\n   *\n   * @type {Boolean}\n   */\n  hoverpause: true,\n\n  /**\n   * Allow for changing slides with left and right keyboard arrows.\n   *\n   * @type {Boolean}\n   */\n  keyboard: true,\n\n  /**\n   * Stop running `perView` number of slides from the end. Use this\n   * option if you don't want to have an empty space after\n   * a slider. Works only with `slider` type and a\n   * non-centered `focusAt` setting.\n   *\n   * @type {Boolean}\n   */\n  bound: false,\n\n  /**\n   * Minimal swipe distance needed to change the slide. Use `false` for turning off a swiping.\n   *\n   * @type {Number|Boolean}\n   */\n  swipeThreshold: 80,\n\n  /**\n   * Minimal mouse drag distance needed to change the slide. Use `false` for turning off a dragging.\n   *\n   * @type {Number|Boolean}\n   */\n  dragThreshold: 120,\n\n  /**\n   * A maximum number of slides to which movement will be made on swiping or dragging. Use `false` for unlimited.\n   *\n   * @type {Number|Boolean}\n   */\n  perTouch: false,\n\n  /**\n   * Moving distance ratio of the slides on a swiping and dragging.\n   *\n   * @type {Number}\n   */\n  touchRatio: 0.5,\n\n  /**\n   * Angle required to activate slides moving on swiping or dragging.\n   *\n   * @type {Number}\n   */\n  touchAngle: 45,\n\n  /**\n   * Duration of the animation in milliseconds.\n   *\n   * @type {Number}\n   */\n  animationDuration: 400,\n\n  /**\n   * Allows looping the `slider` type. Slider will rewind to the first/last slide when it's at the start/end.\n   *\n   * @type {Boolean}\n   */\n  rewind: true,\n\n  /**\n   * Duration of the rewinding animation of the `slider` type in milliseconds.\n   *\n   * @type {Number}\n   */\n  rewindDuration: 800,\n\n  /**\n   * Easing function for the animation.\n   *\n   * @type {String}\n   */\n  animationTimingFunc: 'cubic-bezier(.165, .840, .440, 1)',\n\n  /**\n   * Throttle costly events at most once per every wait milliseconds.\n   *\n   * @type {Number}\n   */\n  throttle: 10,\n\n  /**\n   * Moving direction mode.\n   *\n   * Available inputs:\n   * - 'ltr' - left to right movement,\n   * - 'rtl' - right to left movement.\n   *\n   * @type {String}\n   */\n  direction: 'ltr',\n\n  /**\n   * The distance value of the next and previous viewports which\n   * have to peek in the current view. Accepts number and\n   * pixels as a string. Left and right peeking can be\n   * set up separately with a directions object.\n   *\n   * For example:\n   * `100` - Peek 100px on the both sides.\n   * { before: 100, after: 50 }` - Peek 100px on the left side and 50px on the right side.\n   *\n   * @type {Number|String|Object}\n   */\n  peek: 0,\n\n  /**\n   * Collection of options applied at specified media breakpoints.\n   * For example: display two slides per view under 800px.\n   * `{\n   *   '800px': {\n   *     perView: 2\n   *   }\n   * }`\n   */\n  breakpoints: {},\n\n  /**\n   * Collection of internally used HTML classes.\n   *\n   * @todo Refactor `slider` and `carousel` properties to single `type: { slider: '', carousel: '' }` object\n   * @type {Object}\n   */\n  classes: {\n    direction: {\n      ltr: 'glide--ltr',\n      rtl: 'glide--rtl'\n    },\n    slider: 'glide--slider',\n    carousel: 'glide--carousel',\n    swipeable: 'glide--swipeable',\n    dragging: 'glide--dragging',\n    cloneSlide: 'glide__slide--clone',\n    activeNav: 'glide__bullet--active',\n    activeSlide: 'glide__slide--active',\n    disabledArrow: 'glide__arrow--disabled'\n  }\n};\n/**\n * Outputs warning message to the bowser console.\n *\n * @param  {String} msg\n * @return {Void}\n */\n\nfunction warn(msg) {\n  console.error(\"[Glide warn]: \" + msg);\n}\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar inherits = function inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n/**\n * Converts value entered as number\n * or string to integer value.\n *\n * @param {String} value\n * @returns {Number}\n */\n\n\nfunction toInt(value) {\n  return parseInt(value);\n}\n/**\n * Converts value entered as number\n * or string to flat value.\n *\n * @param {String} value\n * @returns {Number}\n */\n\n\nfunction toFloat(value) {\n  return parseFloat(value);\n}\n/**\n * Indicates whether the specified value is a string.\n *\n * @param  {*}   value\n * @return {Boolean}\n */\n\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n/**\n * Indicates whether the specified value is an object.\n *\n * @param  {*} value\n * @return {Boolean}\n *\n * @see https://github.com/jashkenas/underscore\n */\n\n\nfunction isObject(value) {\n  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n  return type === 'function' || type === 'object' && !!value; // eslint-disable-line no-mixed-operators\n}\n/**\n * Indicates whether the specified value is a number.\n *\n * @param  {*} value\n * @return {Boolean}\n */\n\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n/**\n * Indicates whether the specified value is a function.\n *\n * @param  {*} value\n * @return {Boolean}\n */\n\n\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n/**\n * Indicates whether the specified value is undefined.\n *\n * @param  {*} value\n * @return {Boolean}\n */\n\n\nfunction isUndefined(value) {\n  return typeof value === 'undefined';\n}\n/**\n * Indicates whether the specified value is an array.\n *\n * @param  {*} value\n * @return {Boolean}\n */\n\n\nfunction isArray(value) {\n  return value.constructor === Array;\n}\n/**\n * Creates and initializes specified collection of extensions.\n * Each extension receives access to instance of glide and rest of components.\n *\n * @param {Object} glide\n * @param {Object} extensions\n *\n * @returns {Object}\n */\n\n\nfunction mount(glide, extensions, events) {\n  var components = {};\n\n  for (var name in extensions) {\n    if (isFunction(extensions[name])) {\n      components[name] = extensions[name](glide, components, events);\n    } else {\n      warn('Extension must be a function');\n    }\n  }\n\n  for (var _name in components) {\n    if (isFunction(components[_name].mount)) {\n      components[_name].mount();\n    }\n  }\n\n  return components;\n}\n/**\n * Defines getter and setter property on the specified object.\n *\n * @param  {Object} obj         Object where property has to be defined.\n * @param  {String} prop        Name of the defined property.\n * @param  {Object} definition  Get and set definitions for the property.\n * @return {Void}\n */\n\n\nfunction define(obj, prop, definition) {\n  Object.defineProperty(obj, prop, definition);\n}\n/**\n * Sorts aphabetically object keys.\n *\n * @param  {Object} obj\n * @return {Object}\n */\n\n\nfunction sortKeys(obj) {\n  return Object.keys(obj).sort().reduce(function (r, k) {\n    r[k] = obj[k];\n    return r[k], r;\n  }, {});\n}\n/**\n * Merges passed settings object with default options.\n *\n * @param  {Object} defaults\n * @param  {Object} settings\n * @return {Object}\n */\n\n\nfunction mergeOptions(defaults, settings) {\n  var options = _extends({}, defaults, settings); // `Object.assign` do not deeply merge objects, so we\n  // have to do it manually for every nested object\n  // in options. Although it does not look smart,\n  // it's smaller and faster than some fancy\n  // merging deep-merge algorithm script.\n\n\n  if (settings.hasOwnProperty('classes')) {\n    options.classes = _extends({}, defaults.classes, settings.classes);\n\n    if (settings.classes.hasOwnProperty('direction')) {\n      options.classes.direction = _extends({}, defaults.classes.direction, settings.classes.direction);\n    }\n  }\n\n  if (settings.hasOwnProperty('breakpoints')) {\n    options.breakpoints = _extends({}, defaults.breakpoints, settings.breakpoints);\n  }\n\n  return options;\n}\n\nvar EventsBus = function () {\n  /**\n   * Construct a EventBus instance.\n   *\n   * @param {Object} events\n   */\n  function EventsBus() {\n    var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, EventsBus);\n    this.events = events;\n    this.hop = events.hasOwnProperty;\n  }\n  /**\n   * Adds listener to the specifed event.\n   *\n   * @param {String|Array} event\n   * @param {Function} handler\n   */\n\n\n  createClass(EventsBus, [{\n    key: 'on',\n    value: function on(event, handler) {\n      if (isArray(event)) {\n        for (var i = 0; i < event.length; i++) {\n          this.on(event[i], handler);\n        }\n      } // Create the event's object if not yet created\n\n\n      if (!this.hop.call(this.events, event)) {\n        this.events[event] = [];\n      } // Add the handler to queue\n\n\n      var index = this.events[event].push(handler) - 1; // Provide handle back for removal of event\n\n      return {\n        remove: function remove() {\n          delete this.events[event][index];\n        }\n      };\n    }\n    /**\n     * Runs registered handlers for specified event.\n     *\n     * @param {String|Array} event\n     * @param {Object=} context\n     */\n\n  }, {\n    key: 'emit',\n    value: function emit(event, context) {\n      if (isArray(event)) {\n        for (var i = 0; i < event.length; i++) {\n          this.emit(event[i], context);\n        }\n      } // If the event doesn't exist, or there's no handlers in queue, just leave\n\n\n      if (!this.hop.call(this.events, event)) {\n        return;\n      } // Cycle through events queue, fire!\n\n\n      this.events[event].forEach(function (item) {\n        item(context || {});\n      });\n    }\n  }]);\n  return EventsBus;\n}();\n\nvar Glide = function () {\n  /**\r\n   * Construct glide.\r\n   *\r\n   * @param  {String} selector\r\n   * @param  {Object} options\r\n   */\n  function Glide(selector) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, Glide);\n    this._c = {};\n    this._t = [];\n    this._e = new EventsBus();\n    this.disabled = false;\n    this.selector = selector;\n    this.settings = mergeOptions(defaults, options);\n    this.index = this.settings.startAt;\n  }\n  /**\r\n   * Initializes glide.\r\n   *\r\n   * @param {Object} extensions Collection of extensions to initialize.\r\n   * @return {Glide}\r\n   */\n\n\n  createClass(Glide, [{\n    key: 'mount',\n    value: function mount$$1() {\n      var extensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this._e.emit('mount.before');\n\n      if (isObject(extensions)) {\n        this._c = mount(this, extensions, this._e);\n      } else {\n        warn('You need to provide a object on `mount()`');\n      }\n\n      this._e.emit('mount.after');\n\n      return this;\n    }\n    /**\r\n     * Collects an instance `translate` transformers.\r\n     *\r\n     * @param  {Array} transformers Collection of transformers.\r\n     * @return {Void}\r\n     */\n\n  }, {\n    key: 'mutate',\n    value: function mutate() {\n      var transformers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (isArray(transformers)) {\n        this._t = transformers;\n      } else {\n        warn('You need to provide a array on `mutate()`');\n      }\n\n      return this;\n    }\n    /**\r\n     * Updates glide with specified settings.\r\n     *\r\n     * @param {Object} settings\r\n     * @return {Glide}\r\n     */\n\n  }, {\n    key: 'update',\n    value: function update() {\n      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.settings = mergeOptions(this.settings, settings);\n\n      if (settings.hasOwnProperty('startAt')) {\n        this.index = settings.startAt;\n      }\n\n      this._e.emit('update');\n\n      return this;\n    }\n    /**\r\n     * Change slide with specified pattern. A pattern must be in the special format:\r\n     * `>` - Move one forward\r\n     * `<` - Move one backward\r\n     * `={i}` - Go to {i} zero-based slide (eq. '=1', will go to second slide)\r\n     * `>>` - Rewinds to end (last slide)\r\n     * `<<` - Rewinds to start (first slide)\r\n     *\r\n     * @param {String} pattern\r\n     * @return {Glide}\r\n     */\n\n  }, {\n    key: 'go',\n    value: function go(pattern) {\n      this._c.Run.make(pattern);\n\n      return this;\n    }\n    /**\r\n     * Move track by specified distance.\r\n     *\r\n     * @param {String} distance\r\n     * @return {Glide}\r\n     */\n\n  }, {\n    key: 'move',\n    value: function move(distance) {\n      this._c.Transition.disable();\n\n      this._c.Move.make(distance);\n\n      return this;\n    }\n    /**\r\n     * Destroy instance and revert all changes done by this._c.\r\n     *\r\n     * @return {Glide}\r\n     */\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this._e.emit('destroy');\n\n      return this;\n    }\n    /**\r\n     * Start instance autoplaying.\r\n     *\r\n     * @param {Boolean|Number} interval Run autoplaying with passed interval regardless of `autoplay` settings\r\n     * @return {Glide}\r\n     */\n\n  }, {\n    key: 'play',\n    value: function play() {\n      var interval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (interval) {\n        this.settings.autoplay = interval;\n      }\n\n      this._e.emit('play');\n\n      return this;\n    }\n    /**\r\n     * Stop instance autoplaying.\r\n     *\r\n     * @return {Glide}\r\n     */\n\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this._e.emit('pause');\n\n      return this;\n    }\n    /**\r\n     * Sets glide into a idle status.\r\n     *\r\n     * @return {Glide}\r\n     */\n\n  }, {\n    key: 'disable',\n    value: function disable() {\n      this.disabled = true;\n      return this;\n    }\n    /**\r\n     * Sets glide into a active status.\r\n     *\r\n     * @return {Glide}\r\n     */\n\n  }, {\n    key: 'enable',\n    value: function enable() {\n      this.disabled = false;\n      return this;\n    }\n    /**\r\n     * Adds cuutom event listener with handler.\r\n     *\r\n     * @param  {String|Array} event\r\n     * @param  {Function} handler\r\n     * @return {Glide}\r\n     */\n\n  }, {\n    key: 'on',\n    value: function on(event, handler) {\n      this._e.on(event, handler);\n\n      return this;\n    }\n    /**\r\n     * Checks if glide is a precised type.\r\n     *\r\n     * @param  {String} name\r\n     * @return {Boolean}\r\n     */\n\n  }, {\n    key: 'isType',\n    value: function isType(name) {\n      return this.settings.type === name;\n    }\n    /**\r\n     * Gets value of the core options.\r\n     *\r\n     * @return {Object}\r\n     */\n\n  }, {\n    key: 'settings',\n    get: function get$$1() {\n      return this._o;\n    }\n    /**\r\n     * Sets value of the core options.\r\n     *\r\n     * @param  {Object} o\r\n     * @return {Void}\r\n     */\n    ,\n    set: function set$$1(o) {\n      if (isObject(o)) {\n        this._o = o;\n      } else {\n        warn('Options must be an `object` instance.');\n      }\n    }\n    /**\r\n     * Gets current index of the slider.\r\n     *\r\n     * @return {Object}\r\n     */\n\n  }, {\n    key: 'index',\n    get: function get$$1() {\n      return this._i;\n    }\n    /**\r\n     * Sets current index a slider.\r\n     *\r\n     * @return {Object}\r\n     */\n    ,\n    set: function set$$1(i) {\n      this._i = toInt(i);\n    }\n    /**\r\n     * Gets type name of the slider.\r\n     *\r\n     * @return {String}\r\n     */\n\n  }, {\n    key: 'type',\n    get: function get$$1() {\n      return this.settings.type;\n    }\n    /**\r\n     * Gets value of the idle status.\r\n     *\r\n     * @return {Boolean}\r\n     */\n\n  }, {\n    key: 'disabled',\n    get: function get$$1() {\n      return this._d;\n    }\n    /**\r\n     * Sets value of the idle status.\r\n     *\r\n     * @return {Boolean}\r\n     */\n    ,\n    set: function set$$1(status) {\n      this._d = !!status;\n    }\n  }]);\n  return Glide;\n}();\n\nfunction Run(Glide, Components, Events) {\n  var Run = {\n    /**\n     * Initializes autorunning of the glide.\n     *\n     * @return {Void}\n     */\n    mount: function mount() {\n      this._o = false;\n    },\n\n    /**\n     * Makes glides running based on the passed moving schema.\n     *\n     * @param {String} move\n     */\n    make: function make(move) {\n      var _this = this;\n\n      if (!Glide.disabled) {\n        Glide.disable();\n        this.move = move;\n        Events.emit('run.before', this.move);\n        this.calculate();\n        Events.emit('run', this.move);\n        Components.Transition.after(function () {\n          if (_this.isStart()) {\n            Events.emit('run.start', _this.move);\n          }\n\n          if (_this.isEnd()) {\n            Events.emit('run.end', _this.move);\n          }\n\n          if (_this.isOffset('<') || _this.isOffset('>')) {\n            _this._o = false;\n            Events.emit('run.offset', _this.move);\n          }\n\n          Events.emit('run.after', _this.move);\n          Glide.enable();\n        });\n      }\n    },\n\n    /**\n     * Calculates current index based on defined move.\n     *\n     * @return {Void}\n     */\n    calculate: function calculate() {\n      var move = this.move,\n          length = this.length;\n      var steps = move.steps,\n          direction = move.direction;\n      var countableSteps = isNumber(toInt(steps)) && toInt(steps) !== 0;\n\n      switch (direction) {\n        case '>':\n          if (steps === '>') {\n            Glide.index = length;\n          } else if (this.isEnd()) {\n            if (!(Glide.isType('slider') && !Glide.settings.rewind)) {\n              this._o = true;\n              Glide.index = 0;\n            }\n          } else if (countableSteps) {\n            Glide.index += Math.min(length - Glide.index, -toInt(steps));\n          } else {\n            Glide.index++;\n          }\n\n          break;\n\n        case '<':\n          if (steps === '<') {\n            Glide.index = 0;\n          } else if (this.isStart()) {\n            if (!(Glide.isType('slider') && !Glide.settings.rewind)) {\n              this._o = true;\n              Glide.index = length;\n            }\n          } else if (countableSteps) {\n            Glide.index -= Math.min(Glide.index, toInt(steps));\n          } else {\n            Glide.index--;\n          }\n\n          break;\n\n        case '=':\n          Glide.index = steps;\n          break;\n\n        default:\n          warn('Invalid direction pattern [' + direction + steps + '] has been used');\n          break;\n      }\n    },\n\n    /**\n     * Checks if we are on the first slide.\n     *\n     * @return {Boolean}\n     */\n    isStart: function isStart() {\n      return Glide.index === 0;\n    },\n\n    /**\n     * Checks if we are on the last slide.\n     *\n     * @return {Boolean}\n     */\n    isEnd: function isEnd() {\n      return Glide.index === this.length;\n    },\n\n    /**\n     * Checks if we are making a offset run.\n     *\n     * @param {String} direction\n     * @return {Boolean}\n     */\n    isOffset: function isOffset(direction) {\n      return this._o && this.move.direction === direction;\n    }\n  };\n  define(Run, 'move', {\n    /**\n     * Gets value of the move schema.\n     *\n     * @returns {Object}\n     */\n    get: function get() {\n      return this._m;\n    },\n\n    /**\n     * Sets value of the move schema.\n     *\n     * @returns {Object}\n     */\n    set: function set(value) {\n      var step = value.substr(1);\n      this._m = {\n        direction: value.substr(0, 1),\n        steps: step ? toInt(step) ? toInt(step) : step : 0\n      };\n    }\n  });\n  define(Run, 'length', {\n    /**\n     * Gets value of the running distance based\n     * on zero-indexing number of slides.\n     *\n     * @return {Number}\n     */\n    get: function get() {\n      var settings = Glide.settings;\n      var length = Components.Html.slides.length; // If the `bound` option is acitve, a maximum running distance should be\n      // reduced by `perView` and `focusAt` settings. Running distance\n      // should end before creating an empty space after instance.\n\n      if (Glide.isType('slider') && settings.focusAt !== 'center' && settings.bound) {\n        return length - 1 - (toInt(settings.perView) - 1) + toInt(settings.focusAt);\n      }\n\n      return length - 1;\n    }\n  });\n  define(Run, 'offset', {\n    /**\n     * Gets status of the offsetting flag.\n     *\n     * @return {Boolean}\n     */\n    get: function get() {\n      return this._o;\n    }\n  });\n  return Run;\n}\n/**\n * Returns a current time.\n *\n * @return {Number}\n */\n\n\nfunction now() {\n  return new Date().getTime();\n}\n/**\n * Returns a function, that, when invoked, will only be triggered\n * at most once during a given window of time.\n *\n * @param {Function} func\n * @param {Number} wait\n * @param {Object=} options\n * @return {Function}\n *\n * @see https://github.com/jashkenas/underscore\n */\n\n\nfunction throttle(func, wait, options) {\n  var timeout = void 0,\n      context = void 0,\n      args = void 0,\n      result = void 0;\n  var previous = 0;\n  if (!options) options = {};\n\n  var later = function later() {\n    previous = options.leading === false ? 0 : now();\n    timeout = null;\n    result = func.apply(context, args);\n    if (!timeout) context = args = null;\n  };\n\n  var throttled = function throttled() {\n    var at = now();\n    if (!previous && options.leading === false) previous = at;\n    var remaining = wait - (at - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n\n      previous = at;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n\n  throttled.cancel = function () {\n    clearTimeout(timeout);\n    previous = 0;\n    timeout = context = args = null;\n  };\n\n  return throttled;\n}\n\nvar MARGIN_TYPE = {\n  ltr: ['marginLeft', 'marginRight'],\n  rtl: ['marginRight', 'marginLeft']\n};\n\nfunction Gaps(Glide, Components, Events) {\n  var Gaps = {\n    /**\n     * Applies gaps between slides. First and last\n     * slides do not receive it's edge margins.\n     *\n     * @param {HTMLCollection} slides\n     * @return {Void}\n     */\n    apply: function apply(slides) {\n      for (var i = 0, len = slides.length; i < len; i++) {\n        var style = slides[i].style;\n        var direction = Components.Direction.value;\n\n        if (i !== 0) {\n          style[MARGIN_TYPE[direction][0]] = this.value / 2 + 'px';\n        } else {\n          style[MARGIN_TYPE[direction][0]] = '';\n        }\n\n        if (i !== slides.length - 1) {\n          style[MARGIN_TYPE[direction][1]] = this.value / 2 + 'px';\n        } else {\n          style[MARGIN_TYPE[direction][1]] = '';\n        }\n      }\n    },\n\n    /**\n     * Removes gaps from the slides.\n     *\n     * @param {HTMLCollection} slides\n     * @returns {Void}\n    */\n    remove: function remove(slides) {\n      for (var i = 0, len = slides.length; i < len; i++) {\n        var style = slides[i].style;\n        style.marginLeft = '';\n        style.marginRight = '';\n      }\n    }\n  };\n  define(Gaps, 'value', {\n    /**\n     * Gets value of the gap.\n     *\n     * @returns {Number}\n     */\n    get: function get() {\n      return toInt(Glide.settings.gap);\n    }\n  });\n  define(Gaps, 'grow', {\n    /**\n     * Gets additional dimentions value caused by gaps.\n     * Used to increase width of the slides wrapper.\n     *\n     * @returns {Number}\n     */\n    get: function get() {\n      return Gaps.value * (Components.Sizes.length - 1);\n    }\n  });\n  define(Gaps, 'reductor', {\n    /**\n     * Gets reduction value caused by gaps.\n     * Used to subtract width of the slides.\n     *\n     * @returns {Number}\n     */\n    get: function get() {\n      var perView = Glide.settings.perView;\n      return Gaps.value * (perView - 1) / perView;\n    }\n  });\n  /**\n   * Apply calculated gaps:\n   * - after building, so slides (including clones) will receive proper margins\n   * - on updating via API, to recalculate gaps with new options\n   */\n\n  Events.on(['build.after', 'update'], throttle(function () {\n    Gaps.apply(Components.Html.wrapper.children);\n  }, 30));\n  /**\n   * Remove gaps:\n   * - on destroying to bring markup to its inital state\n   */\n\n  Events.on('destroy', function () {\n    Gaps.remove(Components.Html.wrapper.children);\n  });\n  return Gaps;\n}\n/**\n * Finds siblings nodes of the passed node.\n *\n * @param  {Element} node\n * @return {Array}\n */\n\n\nfunction siblings(node) {\n  if (node && node.parentNode) {\n    var n = node.parentNode.firstChild;\n    var matched = [];\n\n    for (; n; n = n.nextSibling) {\n      if (n.nodeType === 1 && n !== node) {\n        matched.push(n);\n      }\n    }\n\n    return matched;\n  }\n\n  return [];\n}\n/**\n * Checks if passed node exist and is a valid element.\n *\n * @param  {Element} node\n * @return {Boolean}\n */\n\n\nfunction exist(node) {\n  if (node && node instanceof window.HTMLElement) {\n    return true;\n  }\n\n  return false;\n}\n\nvar TRACK_SELECTOR = '[data-glide-el=\"track\"]';\n\nfunction Html(Glide, Components) {\n  var Html = {\n    /**\n     * Setup slider HTML nodes.\n     *\n     * @param {Glide} glide\n     */\n    mount: function mount() {\n      this.root = Glide.selector;\n      this.track = this.root.querySelector(TRACK_SELECTOR);\n      this.slides = Array.prototype.slice.call(this.wrapper.children).filter(function (slide) {\n        return !slide.classList.contains(Glide.settings.classes.cloneSlide);\n      });\n    }\n  };\n  define(Html, 'root', {\n    /**\n     * Gets node of the glide main element.\n     *\n     * @return {Object}\n     */\n    get: function get() {\n      return Html._r;\n    },\n\n    /**\n     * Sets node of the glide main element.\n     *\n     * @return {Object}\n     */\n    set: function set(r) {\n      if (isString(r)) {\n        r = document.querySelector(r);\n      }\n\n      if (exist(r)) {\n        Html._r = r;\n      } else {\n        warn('Root element must be a existing Html node');\n      }\n    }\n  });\n  define(Html, 'track', {\n    /**\n     * Gets node of the glide track with slides.\n     *\n     * @return {Object}\n     */\n    get: function get() {\n      return Html._t;\n    },\n\n    /**\n     * Sets node of the glide track with slides.\n     *\n     * @return {Object}\n     */\n    set: function set(t) {\n      if (exist(t)) {\n        Html._t = t;\n      } else {\n        warn('Could not find track element. Please use ' + TRACK_SELECTOR + ' attribute.');\n      }\n    }\n  });\n  define(Html, 'wrapper', {\n    /**\n     * Gets node of the slides wrapper.\n     *\n     * @return {Object}\n     */\n    get: function get() {\n      return Html.track.children[0];\n    }\n  });\n  return Html;\n}\n\nfunction Peek(Glide, Components, Events) {\n  var Peek = {\n    /**\n     * Setups how much to peek based on settings.\n     *\n     * @return {Void}\n     */\n    mount: function mount() {\n      this.value = Glide.settings.peek;\n    }\n  };\n  define(Peek, 'value', {\n    /**\n     * Gets value of the peek.\n     *\n     * @returns {Number|Object}\n     */\n    get: function get() {\n      return Peek._v;\n    },\n\n    /**\n     * Sets value of the peek.\n     *\n     * @param {Number|Object} value\n     * @return {Void}\n     */\n    set: function set(value) {\n      if (isObject(value)) {\n        value.before = toInt(value.before);\n        value.after = toInt(value.after);\n      } else {\n        value = toInt(value);\n      }\n\n      Peek._v = value;\n    }\n  });\n  define(Peek, 'reductor', {\n    /**\n     * Gets reduction value caused by peek.\n     *\n     * @returns {Number}\n     */\n    get: function get() {\n      var value = Peek.value;\n      var perView = Glide.settings.perView;\n\n      if (isObject(value)) {\n        return value.before / perView + value.after / perView;\n      }\n\n      return value * 2 / perView;\n    }\n  });\n  /**\n   * Recalculate peeking sizes on:\n   * - when resizing window to update to proper percents\n   */\n\n  Events.on(['resize', 'update'], function () {\n    Peek.mount();\n  });\n  return Peek;\n}\n\nfunction Move(Glide, Components, Events) {\n  var Move = {\n    /**\n     * Constructs move component.\n     *\n     * @returns {Void}\n     */\n    mount: function mount() {\n      this._o = 0;\n    },\n\n    /**\n     * Calculates a movement value based on passed offset and currently active index.\n     *\n     * @param  {Number} offset\n     * @return {Void}\n     */\n    make: function make() {\n      var _this = this;\n\n      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      this.offset = offset;\n      Events.emit('move', {\n        movement: this.value\n      });\n      Components.Transition.after(function () {\n        Events.emit('move.after', {\n          movement: _this.value\n        });\n      });\n    }\n  };\n  define(Move, 'offset', {\n    /**\n     * Gets an offset value used to modify current translate.\n     *\n     * @return {Object}\n     */\n    get: function get() {\n      return Move._o;\n    },\n\n    /**\n     * Sets an offset value used to modify current translate.\n     *\n     * @return {Object}\n     */\n    set: function set(value) {\n      Move._o = !isUndefined(value) ? toInt(value) : 0;\n    }\n  });\n  define(Move, 'translate', {\n    /**\n     * Gets a raw movement value.\n     *\n     * @return {Number}\n     */\n    get: function get() {\n      return Components.Sizes.slideWidth * Glide.index;\n    }\n  });\n  define(Move, 'value', {\n    /**\n     * Gets an actual movement value corrected by offset.\n     *\n     * @return {Number}\n     */\n    get: function get() {\n      var offset = this.offset;\n      var translate = this.translate;\n\n      if (Components.Direction.is('rtl')) {\n        return translate + offset;\n      }\n\n      return translate - offset;\n    }\n  });\n  /**\n   * Make movement to proper slide on:\n   * - before build, so glide will start at `startAt` index\n   * - on each standard run to move to newly calculated index\n   */\n\n  Events.on(['build.before', 'run'], function () {\n    Move.make();\n  });\n  return Move;\n}\n\nfunction Sizes(Glide, Components, Events) {\n  var Sizes = {\n    /**\n     * Setups dimentions of slides.\n     *\n     * @return {Void}\n     */\n    setupSlides: function setupSlides() {\n      var width = this.slideWidth + 'px';\n      var slides = Components.Html.slides;\n\n      for (var i = 0; i < slides.length; i++) {\n        slides[i].style.width = width;\n      }\n    },\n\n    /**\n     * Setups dimentions of slides wrapper.\n     *\n     * @return {Void}\n     */\n    setupWrapper: function setupWrapper(dimention) {\n      Components.Html.wrapper.style.width = this.wrapperSize + 'px';\n    },\n\n    /**\n     * Removes applied styles from HTML elements.\n     *\n     * @returns {Void}\n     */\n    remove: function remove() {\n      var slides = Components.Html.slides;\n\n      for (var i = 0; i < slides.length; i++) {\n        slides[i].style.width = '';\n      }\n\n      Components.Html.wrapper.style.width = '';\n    }\n  };\n  define(Sizes, 'length', {\n    /**\n     * Gets count number of the slides.\n     *\n     * @return {Number}\n     */\n    get: function get() {\n      return Components.Html.slides.length;\n    }\n  });\n  define(Sizes, 'width', {\n    /**\n     * Gets width value of the glide.\n     *\n     * @return {Number}\n     */\n    get: function get() {\n      return Components.Html.root.offsetWidth;\n    }\n  });\n  define(Sizes, 'wrapperSize', {\n    /**\n     * Gets size of the slides wrapper.\n     *\n     * @return {Number}\n     */\n    get: function get() {\n      return Sizes.slideWidth * Sizes.length + Components.Gaps.grow + Components.Clones.grow;\n    }\n  });\n  define(Sizes, 'slideWidth', {\n    /**\n     * Gets width value of the single slide.\n     *\n     * @return {Number}\n     */\n    get: function get() {\n      return Sizes.width / Glide.settings.perView - Components.Peek.reductor - Components.Gaps.reductor;\n    }\n  });\n  /**\n   * Apply calculated glide's dimensions:\n   * - before building, so other dimentions (e.g. translate) will be calculated propertly\n   * - when resizing window to recalculate sildes dimensions\n   * - on updating via API, to calculate dimensions based on new options\n   */\n\n  Events.on(['build.before', 'resize', 'update'], function () {\n    Sizes.setupSlides();\n    Sizes.setupWrapper();\n  });\n  /**\n   * Remove calculated glide's dimensions:\n   * - on destoting to bring markup to its inital state\n   */\n\n  Events.on('destroy', function () {\n    Sizes.remove();\n  });\n  return Sizes;\n}\n\nfunction Build(Glide, Components, Events) {\n  var Build = {\n    /**\n     * Init glide building. Adds classes, sets\n     * dimensions and setups initial state.\n     *\n     * @return {Void}\n     */\n    mount: function mount() {\n      Events.emit('build.before');\n      this.typeClass();\n      this.activeClass();\n      Events.emit('build.after');\n    },\n\n    /**\n     * Adds `type` class to the glide element.\n     *\n     * @return {Void}\n     */\n    typeClass: function typeClass() {\n      Components.Html.root.classList.add(Glide.settings.classes[Glide.settings.type]);\n    },\n\n    /**\n     * Sets active class to current slide.\n     *\n     * @return {Void}\n     */\n    activeClass: function activeClass() {\n      var classes = Glide.settings.classes;\n      var slide = Components.Html.slides[Glide.index];\n\n      if (slide) {\n        slide.classList.add(classes.activeSlide);\n        siblings(slide).forEach(function (sibling) {\n          sibling.classList.remove(classes.activeSlide);\n        });\n      }\n    },\n\n    /**\n     * Removes HTML classes applied at building.\n     *\n     * @return {Void}\n     */\n    removeClasses: function removeClasses() {\n      var classes = Glide.settings.classes;\n      Components.Html.root.classList.remove(classes[Glide.settings.type]);\n      Components.Html.slides.forEach(function (sibling) {\n        sibling.classList.remove(classes.activeSlide);\n      });\n    }\n  };\n  /**\n   * Clear building classes:\n   * - on destroying to bring HTML to its initial state\n   * - on updating to remove classes before remounting component\n   */\n\n  Events.on(['destroy', 'update'], function () {\n    Build.removeClasses();\n  });\n  /**\n   * Remount component:\n   * - on resizing of the window to calculate new dimentions\n   * - on updating settings via API\n   */\n\n  Events.on(['resize', 'update'], function () {\n    Build.mount();\n  });\n  /**\n   * Swap active class of current slide:\n   * - after each move to the new index\n   */\n\n  Events.on('move.after', function () {\n    Build.activeClass();\n  });\n  return Build;\n}\n\nfunction Clones(Glide, Components, Events) {\n  var Clones = {\n    /**\n     * Create pattern map and collect slides to be cloned.\n     */\n    mount: function mount() {\n      this.items = [];\n\n      if (Glide.isType('carousel')) {\n        this.items = this.collect();\n      }\n    },\n\n    /**\n     * Collect clones with pattern.\n     *\n     * @return {Void}\n     */\n    collect: function collect() {\n      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var slides = Components.Html.slides;\n      var _Glide$settings = Glide.settings,\n          perView = _Glide$settings.perView,\n          classes = _Glide$settings.classes;\n      var peekIncrementer = +!!Glide.settings.peek;\n      var part = perView + peekIncrementer;\n      var start = slides.slice(0, part);\n      var end = slides.slice(-part);\n\n      for (var r = 0; r < Math.max(1, Math.floor(perView / slides.length)); r++) {\n        for (var i = 0; i < start.length; i++) {\n          var clone = start[i].cloneNode(true);\n          clone.classList.add(classes.cloneSlide);\n          items.push(clone);\n        }\n\n        for (var _i = 0; _i < end.length; _i++) {\n          var _clone = end[_i].cloneNode(true);\n\n          _clone.classList.add(classes.cloneSlide);\n\n          items.unshift(_clone);\n        }\n      }\n\n      return items;\n    },\n\n    /**\n     * Append cloned slides with generated pattern.\n     *\n     * @return {Void}\n     */\n    append: function append() {\n      var items = this.items;\n      var _Components$Html = Components.Html,\n          wrapper = _Components$Html.wrapper,\n          slides = _Components$Html.slides;\n      var half = Math.floor(items.length / 2);\n      var prepend = items.slice(0, half).reverse();\n      var append = items.slice(half, items.length);\n      var width = Components.Sizes.slideWidth + 'px';\n\n      for (var i = 0; i < append.length; i++) {\n        wrapper.appendChild(append[i]);\n      }\n\n      for (var _i2 = 0; _i2 < prepend.length; _i2++) {\n        wrapper.insertBefore(prepend[_i2], slides[0]);\n      }\n\n      for (var _i3 = 0; _i3 < items.length; _i3++) {\n        items[_i3].style.width = width;\n      }\n    },\n\n    /**\n     * Remove all cloned slides.\n     *\n     * @return {Void}\n     */\n    remove: function remove() {\n      var items = this.items;\n\n      for (var i = 0; i < items.length; i++) {\n        Components.Html.wrapper.removeChild(items[i]);\n      }\n    }\n  };\n  define(Clones, 'grow', {\n    /**\n     * Gets additional dimentions value caused by clones.\n     *\n     * @return {Number}\n     */\n    get: function get() {\n      return (Components.Sizes.slideWidth + Components.Gaps.value) * Clones.items.length;\n    }\n  });\n  /**\n   * Append additional slide's clones:\n   * - while glide's type is `carousel`\n   */\n\n  Events.on('update', function () {\n    Clones.remove();\n    Clones.mount();\n    Clones.append();\n  });\n  /**\n   * Append additional slide's clones:\n   * - while glide's type is `carousel`\n   */\n\n  Events.on('build.before', function () {\n    if (Glide.isType('carousel')) {\n      Clones.append();\n    }\n  });\n  /**\n   * Remove clones HTMLElements:\n   * - on destroying, to bring HTML to its initial state\n   */\n\n  Events.on('destroy', function () {\n    Clones.remove();\n  });\n  return Clones;\n}\n\nvar EventsBinder = function () {\n  /**\n   * Construct a EventsBinder instance.\n   */\n  function EventsBinder() {\n    var listeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, EventsBinder);\n    this.listeners = listeners;\n  }\n  /**\n   * Adds events listeners to arrows HTML elements.\n   *\n   * @param  {String|Array} events\n   * @param  {Element|Window|Document} el\n   * @param  {Function} closure\n   * @param  {Boolean|Object} capture\n   * @return {Void}\n   */\n\n\n  createClass(EventsBinder, [{\n    key: 'on',\n    value: function on(events, el, closure) {\n      var capture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (isString(events)) {\n        events = [events];\n      }\n\n      for (var i = 0; i < events.length; i++) {\n        this.listeners[events[i]] = closure;\n        el.addEventListener(events[i], this.listeners[events[i]], capture);\n      }\n    }\n    /**\n     * Removes event listeners from arrows HTML elements.\n     *\n     * @param  {String|Array} events\n     * @param  {Element|Window|Document} el\n     * @param  {Boolean|Object} capture\n     * @return {Void}\n     */\n\n  }, {\n    key: 'off',\n    value: function off(events, el) {\n      var capture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (isString(events)) {\n        events = [events];\n      }\n\n      for (var i = 0; i < events.length; i++) {\n        el.removeEventListener(events[i], this.listeners[events[i]], capture);\n      }\n    }\n    /**\n     * Destroy collected listeners.\n     *\n     * @returns {Void}\n     */\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      delete this.listeners;\n    }\n  }]);\n  return EventsBinder;\n}();\n\nfunction Resize(Glide, Components, Events) {\n  /**\n   * Instance of the binder for DOM Events.\n   *\n   * @type {EventsBinder}\n   */\n  var Binder = new EventsBinder();\n  var Resize = {\n    /**\n     * Initializes window bindings.\n     */\n    mount: function mount() {\n      this.bind();\n    },\n\n    /**\n     * Binds `rezsize` listener to the window.\n     * It's a costly event, so we are debouncing it.\n     *\n     * @return {Void}\n     */\n    bind: function bind() {\n      Binder.on('resize', window, throttle(function () {\n        Events.emit('resize');\n      }, Glide.settings.throttle));\n    },\n\n    /**\n     * Unbinds listeners from the window.\n     *\n     * @return {Void}\n     */\n    unbind: function unbind() {\n      Binder.off('resize', window);\n    }\n  };\n  /**\n   * Remove bindings from window:\n   * - on destroying, to remove added EventListener\n   */\n\n  Events.on('destroy', function () {\n    Resize.unbind();\n    Binder.destroy();\n  });\n  return Resize;\n}\n\nvar VALID_DIRECTIONS = ['ltr', 'rtl'];\nvar FLIPED_MOVEMENTS = {\n  '>': '<',\n  '<': '>',\n  '=': '='\n};\n\nfunction Direction(Glide, Components, Events) {\n  var Direction = {\n    /**\n     * Setups gap value based on settings.\n     *\n     * @return {Void}\n     */\n    mount: function mount() {\n      this.value = Glide.settings.direction;\n    },\n\n    /**\n     * Resolves pattern based on direction value\n     *\n     * @param {String} pattern\n     * @returns {String}\n     */\n    resolve: function resolve(pattern) {\n      var token = pattern.slice(0, 1);\n\n      if (this.is('rtl')) {\n        return pattern.split(token).join(FLIPED_MOVEMENTS[token]);\n      }\n\n      return pattern;\n    },\n\n    /**\n     * Checks value of direction mode.\n     *\n     * @param {String} direction\n     * @returns {Boolean}\n     */\n    is: function is(direction) {\n      return this.value === direction;\n    },\n\n    /**\n     * Applies direction class to the root HTML element.\n     *\n     * @return {Void}\n     */\n    addClass: function addClass() {\n      Components.Html.root.classList.add(Glide.settings.classes.direction[this.value]);\n    },\n\n    /**\n     * Removes direction class from the root HTML element.\n     *\n     * @return {Void}\n     */\n    removeClass: function removeClass() {\n      Components.Html.root.classList.remove(Glide.settings.classes.direction[this.value]);\n    }\n  };\n  define(Direction, 'value', {\n    /**\n     * Gets value of the direction.\n     *\n     * @returns {Number}\n     */\n    get: function get() {\n      return Direction._v;\n    },\n\n    /**\n     * Sets value of the direction.\n     *\n     * @param {String} value\n     * @return {Void}\n     */\n    set: function set(value) {\n      if (VALID_DIRECTIONS.indexOf(value) > -1) {\n        Direction._v = value;\n      } else {\n        warn('Direction value must be `ltr` or `rtl`');\n      }\n    }\n  });\n  /**\n   * Clear direction class:\n   * - on destroy to bring HTML to its initial state\n   * - on update to remove class before reappling bellow\n   */\n\n  Events.on(['destroy', 'update'], function () {\n    Direction.removeClass();\n  });\n  /**\n   * Remount component:\n   * - on update to reflect changes in direction value\n   */\n\n  Events.on('update', function () {\n    Direction.mount();\n  });\n  /**\n   * Apply direction class:\n   * - before building to apply class for the first time\n   * - on updating to reapply direction class that may changed\n   */\n\n  Events.on(['build.before', 'update'], function () {\n    Direction.addClass();\n  });\n  return Direction;\n}\n/**\n * Reflects value of glide movement.\n *\n * @param  {Object} Glide\n * @param  {Object} Components\n * @return {Object}\n */\n\n\nfunction Rtl(Glide, Components) {\n  return {\n    /**\n     * Negates the passed translate if glide is in RTL option.\n     *\n     * @param  {Number} translate\n     * @return {Number}\n     */\n    modify: function modify(translate) {\n      if (Components.Direction.is('rtl')) {\n        return -translate;\n      }\n\n      return translate;\n    }\n  };\n}\n/**\n * Updates glide movement with a `gap` settings.\n *\n * @param  {Object} Glide\n * @param  {Object} Components\n * @return {Object}\n */\n\n\nfunction Gap(Glide, Components) {\n  return {\n    /**\n     * Modifies passed translate value with number in the `gap` settings.\n     *\n     * @param  {Number} translate\n     * @return {Number}\n     */\n    modify: function modify(translate) {\n      return translate + Components.Gaps.value * Glide.index;\n    }\n  };\n}\n/**\n * Updates glide movement with width of additional clones width.\n *\n * @param  {Object} Glide\n * @param  {Object} Components\n * @return {Object}\n */\n\n\nfunction Grow(Glide, Components) {\n  return {\n    /**\n     * Adds to the passed translate width of the half of clones.\n     *\n     * @param  {Number} translate\n     * @return {Number}\n     */\n    modify: function modify(translate) {\n      return translate + Components.Clones.grow / 2;\n    }\n  };\n}\n/**\n * Updates glide movement with a `peek` settings.\n *\n * @param  {Object} Glide\n * @param  {Object} Components\n * @return {Object}\n */\n\n\nfunction Peeking(Glide, Components) {\n  return {\n    /**\n     * Modifies passed translate value with a `peek` setting.\n     *\n     * @param  {Number} translate\n     * @return {Number}\n     */\n    modify: function modify(translate) {\n      if (Glide.settings.focusAt >= 0) {\n        var peek = Components.Peek.value;\n\n        if (isObject(peek)) {\n          return translate - peek.before;\n        }\n\n        return translate - peek;\n      }\n\n      return translate;\n    }\n  };\n}\n/**\n * Updates glide movement with a `focusAt` settings.\n *\n * @param  {Object} Glide\n * @param  {Object} Components\n * @return {Object}\n */\n\n\nfunction Focusing(Glide, Components) {\n  return {\n    /**\n     * Modifies passed translate value with index in the `focusAt` setting.\n     *\n     * @param  {Number} translate\n     * @return {Number}\n     */\n    modify: function modify(translate) {\n      var gap = Components.Gaps.value;\n      var width = Components.Sizes.width;\n      var focusAt = Glide.settings.focusAt;\n      var slideWidth = Components.Sizes.slideWidth;\n\n      if (focusAt === 'center') {\n        return translate - (width / 2 - slideWidth / 2);\n      }\n\n      return translate - slideWidth * focusAt - gap * focusAt;\n    }\n  };\n}\n/**\n * Applies diffrent transformers on translate value.\n *\n * @param  {Object} Glide\n * @param  {Object} Components\n * @return {Object}\n */\n\n\nfunction mutator(Glide, Components, Events) {\n  /**\n   * Merge instance transformers with collection of default transformers.\n   * It's important that the Rtl component be last on the list,\n   * so it reflects all previous transformations.\n   *\n   * @type {Array}\n   */\n  var TRANSFORMERS = [Gap, Grow, Peeking, Focusing].concat(Glide._t, [Rtl]);\n  return {\n    /**\n     * Piplines translate value with registered transformers.\n     *\n     * @param  {Number} translate\n     * @return {Number}\n     */\n    mutate: function mutate(translate) {\n      for (var i = 0; i < TRANSFORMERS.length; i++) {\n        var transformer = TRANSFORMERS[i];\n\n        if (isFunction(transformer) && isFunction(transformer().modify)) {\n          translate = transformer(Glide, Components, Events).modify(translate);\n        } else {\n          warn('Transformer should be a function that returns an object with `modify()` method');\n        }\n      }\n\n      return translate;\n    }\n  };\n}\n\nfunction Translate(Glide, Components, Events) {\n  var Translate = {\n    /**\n     * Sets value of translate on HTML element.\n     *\n     * @param {Number} value\n     * @return {Void}\n     */\n    set: function set(value) {\n      var transform = mutator(Glide, Components).mutate(value);\n      Components.Html.wrapper.style.transform = 'translate3d(' + -1 * transform + 'px, 0px, 0px)';\n    },\n\n    /**\n     * Removes value of translate from HTML element.\n     *\n     * @return {Void}\n     */\n    remove: function remove() {\n      Components.Html.wrapper.style.transform = '';\n    }\n  };\n  /**\n   * Set new translate value:\n   * - on move to reflect index change\n   * - on updating via API to reflect possible changes in options\n   */\n\n  Events.on('move', function (context) {\n    var gap = Components.Gaps.value;\n    var length = Components.Sizes.length;\n    var width = Components.Sizes.slideWidth;\n\n    if (Glide.isType('carousel') && Components.Run.isOffset('<')) {\n      Components.Transition.after(function () {\n        Events.emit('translate.jump');\n        Translate.set(width * (length - 1));\n      });\n      return Translate.set(-width - gap * length);\n    }\n\n    if (Glide.isType('carousel') && Components.Run.isOffset('>')) {\n      Components.Transition.after(function () {\n        Events.emit('translate.jump');\n        Translate.set(0);\n      });\n      return Translate.set(width * length + gap * length);\n    }\n\n    return Translate.set(context.movement);\n  });\n  /**\n   * Remove translate:\n   * - on destroying to bring markup to its inital state\n   */\n\n  Events.on('destroy', function () {\n    Translate.remove();\n  });\n  return Translate;\n}\n\nfunction Transition(Glide, Components, Events) {\n  /**\n   * Holds inactivity status of transition.\n   * When true transition is not applied.\n   *\n   * @type {Boolean}\n   */\n  var disabled = false;\n  var Transition = {\n    /**\n     * Composes string of the CSS transition.\n     *\n     * @param {String} property\n     * @return {String}\n     */\n    compose: function compose(property) {\n      var settings = Glide.settings;\n\n      if (!disabled) {\n        return property + ' ' + this.duration + 'ms ' + settings.animationTimingFunc;\n      }\n\n      return property + ' 0ms ' + settings.animationTimingFunc;\n    },\n\n    /**\n     * Sets value of transition on HTML element.\n     *\n     * @param {String=} property\n     * @return {Void}\n     */\n    set: function set() {\n      var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transform';\n      Components.Html.wrapper.style.transition = this.compose(property);\n    },\n\n    /**\n     * Removes value of transition from HTML element.\n     *\n     * @return {Void}\n     */\n    remove: function remove() {\n      Components.Html.wrapper.style.transition = '';\n    },\n\n    /**\n     * Runs callback after animation.\n     *\n     * @param  {Function} callback\n     * @return {Void}\n     */\n    after: function after(callback) {\n      setTimeout(function () {\n        callback();\n      }, this.duration);\n    },\n\n    /**\n     * Enable transition.\n     *\n     * @return {Void}\n     */\n    enable: function enable() {\n      disabled = false;\n      this.set();\n    },\n\n    /**\n     * Disable transition.\n     *\n     * @return {Void}\n     */\n    disable: function disable() {\n      disabled = true;\n      this.set();\n    }\n  };\n  define(Transition, 'duration', {\n    /**\n     * Gets duration of the transition based\n     * on currently running animation type.\n     *\n     * @return {Number}\n     */\n    get: function get() {\n      var settings = Glide.settings;\n\n      if (Glide.isType('slider') && Components.Run.offset) {\n        return settings.rewindDuration;\n      }\n\n      return settings.animationDuration;\n    }\n  });\n  /**\n   * Set transition `style` value:\n   * - on each moving, because it may be cleared by offset move\n   */\n\n  Events.on('move', function () {\n    Transition.set();\n  });\n  /**\n   * Disable transition:\n   * - before initial build to avoid transitioning from `0` to `startAt` index\n   * - while resizing window and recalculating dimentions\n   * - on jumping from offset transition at start and end edges in `carousel` type\n   */\n\n  Events.on(['build.before', 'resize', 'translate.jump'], function () {\n    Transition.disable();\n  });\n  /**\n   * Enable transition:\n   * - on each running, because it may be disabled by offset move\n   */\n\n  Events.on('run', function () {\n    Transition.enable();\n  });\n  /**\n   * Remove transition:\n   * - on destroying to bring markup to its inital state\n   */\n\n  Events.on('destroy', function () {\n    Transition.remove();\n  });\n  return Transition;\n}\n/**\n * Test via a getter in the options object to see\n * if the passive property is accessed.\n *\n * @see https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection\n */\n\n\nvar supportsPassive = false;\n\ntry {\n  var opts = Object.defineProperty({}, 'passive', {\n    get: function get() {\n      supportsPassive = true;\n    }\n  });\n  window.addEventListener('testPassive', null, opts);\n  window.removeEventListener('testPassive', null, opts);\n} catch (e) {}\n\nvar supportsPassive$1 = supportsPassive;\nvar START_EVENTS = ['touchstart', 'mousedown'];\nvar MOVE_EVENTS = ['touchmove', 'mousemove'];\nvar END_EVENTS = ['touchend', 'touchcancel', 'mouseup', 'mouseleave'];\nvar MOUSE_EVENTS = ['mousedown', 'mousemove', 'mouseup', 'mouseleave'];\n\nfunction Swipe(Glide, Components, Events) {\n  /**\n   * Instance of the binder for DOM Events.\n   *\n   * @type {EventsBinder}\n   */\n  var Binder = new EventsBinder();\n  var swipeSin = 0;\n  var swipeStartX = 0;\n  var swipeStartY = 0;\n  var disabled = false;\n  var capture = supportsPassive$1 ? {\n    passive: true\n  } : false;\n  var Swipe = {\n    /**\n     * Initializes swipe bindings.\n     *\n     * @return {Void}\n     */\n    mount: function mount() {\n      this.bindSwipeStart();\n    },\n\n    /**\n     * Handler for `swipestart` event. Calculates entry points of the user's tap.\n     *\n     * @param {Object} event\n     * @return {Void}\n     */\n    start: function start(event) {\n      if (!disabled && !Glide.disabled) {\n        this.disable();\n        var swipe = this.touches(event);\n        swipeSin = null;\n        swipeStartX = toInt(swipe.pageX);\n        swipeStartY = toInt(swipe.pageY);\n        this.bindSwipeMove();\n        this.bindSwipeEnd();\n        Events.emit('swipe.start');\n      }\n    },\n\n    /**\n     * Handler for `swipemove` event. Calculates user's tap angle and distance.\n     *\n     * @param {Object} event\n     */\n    move: function move(event) {\n      if (!Glide.disabled) {\n        var _Glide$settings = Glide.settings,\n            touchAngle = _Glide$settings.touchAngle,\n            touchRatio = _Glide$settings.touchRatio,\n            classes = _Glide$settings.classes;\n        var swipe = this.touches(event);\n        var subExSx = toInt(swipe.pageX) - swipeStartX;\n        var subEySy = toInt(swipe.pageY) - swipeStartY;\n        var powEX = Math.abs(subExSx << 2);\n        var powEY = Math.abs(subEySy << 2);\n        var swipeHypotenuse = Math.sqrt(powEX + powEY);\n        var swipeCathetus = Math.sqrt(powEY);\n        swipeSin = Math.asin(swipeCathetus / swipeHypotenuse);\n\n        if (swipeSin * 180 / Math.PI < touchAngle) {\n          event.stopPropagation();\n          Components.Move.make(subExSx * toFloat(touchRatio));\n          Components.Html.root.classList.add(classes.dragging);\n          Events.emit('swipe.move');\n        } else {\n          return false;\n        }\n      }\n    },\n\n    /**\n     * Handler for `swipeend` event. Finitializes user's tap and decides about glide move.\n     *\n     * @param {Object} event\n     * @return {Void}\n     */\n    end: function end(event) {\n      if (!Glide.disabled) {\n        var settings = Glide.settings;\n        var swipe = this.touches(event);\n        var threshold = this.threshold(event);\n        var swipeDistance = swipe.pageX - swipeStartX;\n        var swipeDeg = swipeSin * 180 / Math.PI;\n        var steps = Math.round(swipeDistance / Components.Sizes.slideWidth);\n        this.enable();\n\n        if (swipeDistance > threshold && swipeDeg < settings.touchAngle) {\n          // While swipe is positive and greater than threshold move backward.\n          if (settings.perTouch) {\n            steps = Math.min(steps, toInt(settings.perTouch));\n          }\n\n          if (Components.Direction.is('rtl')) {\n            steps = -steps;\n          }\n\n          Components.Run.make(Components.Direction.resolve('<' + steps));\n        } else if (swipeDistance < -threshold && swipeDeg < settings.touchAngle) {\n          // While swipe is negative and lower than negative threshold move forward.\n          if (settings.perTouch) {\n            steps = Math.max(steps, -toInt(settings.perTouch));\n          }\n\n          if (Components.Direction.is('rtl')) {\n            steps = -steps;\n          }\n\n          Components.Run.make(Components.Direction.resolve('>' + steps));\n        } else {\n          // While swipe don't reach distance apply previous transform.\n          Components.Move.make();\n        }\n\n        Components.Html.root.classList.remove(settings.classes.dragging);\n        this.unbindSwipeMove();\n        this.unbindSwipeEnd();\n        Events.emit('swipe.end');\n      }\n    },\n\n    /**\n     * Binds swipe's starting event.\n     *\n     * @return {Void}\n     */\n    bindSwipeStart: function bindSwipeStart() {\n      var _this = this;\n\n      var settings = Glide.settings;\n\n      if (settings.swipeThreshold) {\n        Binder.on(START_EVENTS[0], Components.Html.wrapper, function (event) {\n          _this.start(event);\n        }, capture);\n      }\n\n      if (settings.dragThreshold) {\n        Binder.on(START_EVENTS[1], Components.Html.wrapper, function (event) {\n          _this.start(event);\n        }, capture);\n      }\n    },\n\n    /**\n     * Unbinds swipe's starting event.\n     *\n     * @return {Void}\n     */\n    unbindSwipeStart: function unbindSwipeStart() {\n      Binder.off(START_EVENTS[0], Components.Html.wrapper, capture);\n      Binder.off(START_EVENTS[1], Components.Html.wrapper, capture);\n    },\n\n    /**\n     * Binds swipe's moving event.\n     *\n     * @return {Void}\n     */\n    bindSwipeMove: function bindSwipeMove() {\n      var _this2 = this;\n\n      Binder.on(MOVE_EVENTS, Components.Html.wrapper, throttle(function (event) {\n        _this2.move(event);\n      }, Glide.settings.throttle), capture);\n    },\n\n    /**\n     * Unbinds swipe's moving event.\n     *\n     * @return {Void}\n     */\n    unbindSwipeMove: function unbindSwipeMove() {\n      Binder.off(MOVE_EVENTS, Components.Html.wrapper, capture);\n    },\n\n    /**\n     * Binds swipe's ending event.\n     *\n     * @return {Void}\n     */\n    bindSwipeEnd: function bindSwipeEnd() {\n      var _this3 = this;\n\n      Binder.on(END_EVENTS, Components.Html.wrapper, function (event) {\n        _this3.end(event);\n      });\n    },\n\n    /**\n     * Unbinds swipe's ending event.\n     *\n     * @return {Void}\n     */\n    unbindSwipeEnd: function unbindSwipeEnd() {\n      Binder.off(END_EVENTS, Components.Html.wrapper);\n    },\n\n    /**\n     * Normalizes event touches points accorting to different types.\n     *\n     * @param {Object} event\n     */\n    touches: function touches(event) {\n      if (MOUSE_EVENTS.indexOf(event.type) > -1) {\n        return event;\n      }\n\n      return event.touches[0] || event.changedTouches[0];\n    },\n\n    /**\n     * Gets value of minimum swipe distance settings based on event type.\n     *\n     * @return {Number}\n     */\n    threshold: function threshold(event) {\n      var settings = Glide.settings;\n\n      if (MOUSE_EVENTS.indexOf(event.type) > -1) {\n        return settings.dragThreshold;\n      }\n\n      return settings.swipeThreshold;\n    },\n\n    /**\n     * Enables swipe event.\n     *\n     * @return {self}\n     */\n    enable: function enable() {\n      disabled = false;\n      Components.Transition.enable();\n      return this;\n    },\n\n    /**\n     * Disables swipe event.\n     *\n     * @return {self}\n     */\n    disable: function disable() {\n      disabled = true;\n      Components.Transition.disable();\n      return this;\n    }\n  };\n  /**\n   * Add component class:\n   * - after initial building\n   */\n\n  Events.on('build.after', function () {\n    Components.Html.root.classList.add(Glide.settings.classes.swipeable);\n  });\n  /**\n   * Remove swiping bindings:\n   * - on destroying, to remove added EventListeners\n   */\n\n  Events.on('destroy', function () {\n    Swipe.unbindSwipeStart();\n    Swipe.unbindSwipeMove();\n    Swipe.unbindSwipeEnd();\n    Binder.destroy();\n  });\n  return Swipe;\n}\n\nfunction Images(Glide, Components, Events) {\n  /**\n   * Instance of the binder for DOM Events.\n   *\n   * @type {EventsBinder}\n   */\n  var Binder = new EventsBinder();\n  var Images = {\n    /**\n     * Binds listener to glide wrapper.\n     *\n     * @return {Void}\n     */\n    mount: function mount() {\n      this.bind();\n    },\n\n    /**\n     * Binds `dragstart` event on wrapper to prevent dragging images.\n     *\n     * @return {Void}\n     */\n    bind: function bind() {\n      Binder.on('dragstart', Components.Html.wrapper, this.dragstart);\n    },\n\n    /**\n     * Unbinds `dragstart` event on wrapper.\n     *\n     * @return {Void}\n     */\n    unbind: function unbind() {\n      Binder.off('dragstart', Components.Html.wrapper);\n    },\n\n    /**\n     * Event handler. Prevents dragging.\n     *\n     * @return {Void}\n     */\n    dragstart: function dragstart(event) {\n      event.preventDefault();\n    }\n  };\n  /**\n   * Remove bindings from images:\n   * - on destroying, to remove added EventListeners\n   */\n\n  Events.on('destroy', function () {\n    Images.unbind();\n    Binder.destroy();\n  });\n  return Images;\n}\n\nfunction Anchors(Glide, Components, Events) {\n  /**\n   * Instance of the binder for DOM Events.\n   *\n   * @type {EventsBinder}\n   */\n  var Binder = new EventsBinder();\n  /**\n   * Holds detaching status of anchors.\n   * Prevents detaching of already detached anchors.\n   *\n   * @private\n   * @type {Boolean}\n   */\n\n  var detached = false;\n  /**\n   * Holds preventing status of anchors.\n   * If `true` redirection after click will be disabled.\n   *\n   * @private\n   * @type {Boolean}\n   */\n\n  var prevented = false;\n  var Anchors = {\n    /**\n     * Setups a initial state of anchors component.\n     *\n     * @returns {Void}\n     */\n    mount: function mount() {\n      /**\n       * Holds collection of anchors elements.\n       *\n       * @private\n       * @type {HTMLCollection}\n       */\n      this._a = Components.Html.wrapper.querySelectorAll('a');\n      this.bind();\n    },\n\n    /**\n     * Binds events to anchors inside a track.\n     *\n     * @return {Void}\n     */\n    bind: function bind() {\n      Binder.on('click', Components.Html.wrapper, this.click);\n    },\n\n    /**\n     * Unbinds events attached to anchors inside a track.\n     *\n     * @return {Void}\n     */\n    unbind: function unbind() {\n      Binder.off('click', Components.Html.wrapper);\n    },\n\n    /**\n     * Handler for click event. Prevents clicks when glide is in `prevent` status.\n     *\n     * @param  {Object} event\n     * @return {Void}\n     */\n    click: function click(event) {\n      if (prevented) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    },\n\n    /**\n     * Detaches anchors click event inside glide.\n     *\n     * @return {self}\n     */\n    detach: function detach() {\n      prevented = true;\n\n      if (!detached) {\n        for (var i = 0; i < this.items.length; i++) {\n          this.items[i].draggable = false;\n          this.items[i].setAttribute('data-href', this.items[i].getAttribute('href'));\n          this.items[i].removeAttribute('href');\n        }\n\n        detached = true;\n      }\n\n      return this;\n    },\n\n    /**\n     * Attaches anchors click events inside glide.\n     *\n     * @return {self}\n     */\n    attach: function attach() {\n      prevented = false;\n\n      if (detached) {\n        for (var i = 0; i < this.items.length; i++) {\n          this.items[i].draggable = true;\n          this.items[i].setAttribute('href', this.items[i].getAttribute('data-href'));\n        }\n\n        detached = false;\n      }\n\n      return this;\n    }\n  };\n  define(Anchors, 'items', {\n    /**\n     * Gets collection of the arrows HTML elements.\n     *\n     * @return {HTMLElement[]}\n     */\n    get: function get() {\n      return Anchors._a;\n    }\n  });\n  /**\n   * Detach anchors inside slides:\n   * - on swiping, so they won't redirect to its `href` attributes\n   */\n\n  Events.on('swipe.move', function () {\n    Anchors.detach();\n  });\n  /**\n   * Attach anchors inside slides:\n   * - after swiping and transitions ends, so they can redirect after click again\n   */\n\n  Events.on('swipe.end', function () {\n    Components.Transition.after(function () {\n      Anchors.attach();\n    });\n  });\n  /**\n   * Unbind anchors inside slides:\n   * - on destroying, to bring anchors to its initial state\n   */\n\n  Events.on('destroy', function () {\n    Anchors.attach();\n    Anchors.unbind();\n    Binder.destroy();\n  });\n  return Anchors;\n}\n\nvar NAV_SELECTOR = '[data-glide-el=\"controls[nav]\"]';\nvar CONTROLS_SELECTOR = '[data-glide-el^=\"controls\"]';\n\nfunction Controls(Glide, Components, Events) {\n  /**\n   * Instance of the binder for DOM Events.\n   *\n   * @type {EventsBinder}\n   */\n  var Binder = new EventsBinder();\n  var capture = supportsPassive$1 ? {\n    passive: true\n  } : false;\n  var Controls = {\n    /**\n     * Inits arrows. Binds events listeners\n     * to the arrows HTML elements.\n     *\n     * @return {Void}\n     */\n    mount: function mount() {\n      /**\n       * Collection of navigation HTML elements.\n       *\n       * @private\n       * @type {HTMLCollection}\n       */\n      this._n = Components.Html.root.querySelectorAll(NAV_SELECTOR);\n      /**\n       * Collection of controls HTML elements.\n       *\n       * @private\n       * @type {HTMLCollection}\n       */\n\n      this._c = Components.Html.root.querySelectorAll(CONTROLS_SELECTOR);\n      this.addBindings();\n    },\n\n    /**\n     * Sets active class to current slide.\n     *\n     * @return {Void}\n     */\n    setActive: function setActive() {\n      for (var i = 0; i < this._n.length; i++) {\n        this.addClass(this._n[i].children);\n      }\n    },\n\n    /**\n     * Removes active class to current slide.\n     *\n     * @return {Void}\n     */\n    removeActive: function removeActive() {\n      for (var i = 0; i < this._n.length; i++) {\n        this.removeClass(this._n[i].children);\n      }\n    },\n\n    /**\n     * Toggles active class on items inside navigation.\n     *\n     * @param  {HTMLElement} controls\n     * @return {Void}\n     */\n    addClass: function addClass(controls) {\n      var settings = Glide.settings;\n      var item = controls[Glide.index];\n\n      if (item) {\n        item.classList.add(settings.classes.activeNav);\n        siblings(item).forEach(function (sibling) {\n          sibling.classList.remove(settings.classes.activeNav);\n        });\n      }\n    },\n\n    /**\n     * Removes active class from active control.\n     *\n     * @param  {HTMLElement} controls\n     * @return {Void}\n     */\n    removeClass: function removeClass(controls) {\n      var item = controls[Glide.index];\n\n      if (item) {\n        item.classList.remove(Glide.settings.classes.activeNav);\n      }\n    },\n\n    /**\n     * Adds handles to the each group of controls.\n     *\n     * @return {Void}\n     */\n    addBindings: function addBindings() {\n      for (var i = 0; i < this._c.length; i++) {\n        this.bind(this._c[i].children);\n      }\n    },\n\n    /**\n     * Removes handles from the each group of controls.\n     *\n     * @return {Void}\n     */\n    removeBindings: function removeBindings() {\n      for (var i = 0; i < this._c.length; i++) {\n        this.unbind(this._c[i].children);\n      }\n    },\n\n    /**\n     * Binds events to arrows HTML elements.\n     *\n     * @param {HTMLCollection} elements\n     * @return {Void}\n     */\n    bind: function bind(elements) {\n      for (var i = 0; i < elements.length; i++) {\n        Binder.on('click', elements[i], this.click);\n        Binder.on('touchstart', elements[i], this.click, capture);\n      }\n    },\n\n    /**\n     * Unbinds events binded to the arrows HTML elements.\n     *\n     * @param {HTMLCollection} elements\n     * @return {Void}\n     */\n    unbind: function unbind(elements) {\n      for (var i = 0; i < elements.length; i++) {\n        Binder.off(['click', 'touchstart'], elements[i]);\n      }\n    },\n\n    /**\n     * Handles `click` event on the arrows HTML elements.\n     * Moves slider in driection precised in\n     * `data-glide-dir` attribute.\n     *\n     * @param {Object} event\n     * @return {Void}\n     */\n    click: function click(event) {\n      event.preventDefault();\n      Components.Run.make(Components.Direction.resolve(event.currentTarget.getAttribute('data-glide-dir')));\n    }\n  };\n  define(Controls, 'items', {\n    /**\n     * Gets collection of the controls HTML elements.\n     *\n     * @return {HTMLElement[]}\n     */\n    get: function get() {\n      return Controls._c;\n    }\n  });\n  /**\n   * Swap active class of current navigation item:\n   * - after mounting to set it to initial index\n   * - after each move to the new index\n   */\n\n  Events.on(['mount.after', 'move.after'], function () {\n    Controls.setActive();\n  });\n  /**\n   * Remove bindings and HTML Classes:\n   * - on destroying, to bring markup to its initial state\n   */\n\n  Events.on('destroy', function () {\n    Controls.removeBindings();\n    Controls.removeActive();\n    Binder.destroy();\n  });\n  return Controls;\n}\n\nfunction Keyboard(Glide, Components, Events) {\n  /**\n   * Instance of the binder for DOM Events.\n   *\n   * @type {EventsBinder}\n   */\n  var Binder = new EventsBinder();\n  var Keyboard = {\n    /**\n     * Binds keyboard events on component mount.\n     *\n     * @return {Void}\n     */\n    mount: function mount() {\n      if (Glide.settings.keyboard) {\n        this.bind();\n      }\n    },\n\n    /**\n     * Adds keyboard press events.\n     *\n     * @return {Void}\n     */\n    bind: function bind() {\n      Binder.on('keyup', document, this.press);\n    },\n\n    /**\n     * Removes keyboard press events.\n     *\n     * @return {Void}\n     */\n    unbind: function unbind() {\n      Binder.off('keyup', document);\n    },\n\n    /**\n     * Handles keyboard's arrows press and moving glide foward and backward.\n     *\n     * @param  {Object} event\n     * @return {Void}\n     */\n    press: function press(event) {\n      if (event.keyCode === 39) {\n        Components.Run.make(Components.Direction.resolve('>'));\n      }\n\n      if (event.keyCode === 37) {\n        Components.Run.make(Components.Direction.resolve('<'));\n      }\n    }\n  };\n  /**\n   * Remove bindings from keyboard:\n   * - on destroying to remove added events\n   * - on updating to remove events before remounting\n   */\n\n  Events.on(['destroy', 'update'], function () {\n    Keyboard.unbind();\n  });\n  /**\n   * Remount component\n   * - on updating to reflect potential changes in settings\n   */\n\n  Events.on('update', function () {\n    Keyboard.mount();\n  });\n  /**\n   * Destroy binder:\n   * - on destroying to remove listeners\n   */\n\n  Events.on('destroy', function () {\n    Binder.destroy();\n  });\n  return Keyboard;\n}\n\nfunction Autoplay(Glide, Components, Events) {\n  /**\n   * Instance of the binder for DOM Events.\n   *\n   * @type {EventsBinder}\n   */\n  var Binder = new EventsBinder();\n  var Autoplay = {\n    /**\n     * Initializes autoplaying and events.\n     *\n     * @return {Void}\n     */\n    mount: function mount() {\n      this.start();\n\n      if (Glide.settings.hoverpause) {\n        this.bind();\n      }\n    },\n\n    /**\n     * Starts autoplaying in configured interval.\n     *\n     * @param {Boolean|Number} force Run autoplaying with passed interval regardless of `autoplay` settings\n     * @return {Void}\n     */\n    start: function start() {\n      var _this = this;\n\n      if (Glide.settings.autoplay) {\n        if (isUndefined(this._i)) {\n          this._i = setInterval(function () {\n            _this.stop();\n\n            Components.Run.make('>');\n\n            _this.start();\n          }, this.time);\n        }\n      }\n    },\n\n    /**\n     * Stops autorunning of the glide.\n     *\n     * @return {Void}\n     */\n    stop: function stop() {\n      this._i = clearInterval(this._i);\n    },\n\n    /**\n     * Stops autoplaying while mouse is over glide's area.\n     *\n     * @return {Void}\n     */\n    bind: function bind() {\n      var _this2 = this;\n\n      Binder.on('mouseover', Components.Html.root, function () {\n        _this2.stop();\n      });\n      Binder.on('mouseout', Components.Html.root, function () {\n        _this2.start();\n      });\n    },\n\n    /**\n     * Unbind mouseover events.\n     *\n     * @returns {Void}\n     */\n    unbind: function unbind() {\n      Binder.off(['mouseover', 'mouseout'], Components.Html.root);\n    }\n  };\n  define(Autoplay, 'time', {\n    /**\n     * Gets time period value for the autoplay interval. Prioritizes\n     * times in `data-glide-autoplay` attrubutes over options.\n     *\n     * @return {Number}\n     */\n    get: function get() {\n      var autoplay = Components.Html.slides[Glide.index].getAttribute('data-glide-autoplay');\n\n      if (autoplay) {\n        return toInt(autoplay);\n      }\n\n      return toInt(Glide.settings.autoplay);\n    }\n  });\n  /**\n   * Stop autoplaying and unbind events:\n   * - on destroying, to clear defined interval\n   * - on updating via API to reset interval that may changed\n   */\n\n  Events.on(['destroy', 'update'], function () {\n    Autoplay.unbind();\n  });\n  /**\n   * Stop autoplaying:\n   * - before each run, to restart autoplaying\n   * - on pausing via API\n   * - on destroying, to clear defined interval\n   * - while starting a swipe\n   * - on updating via API to reset interval that may changed\n   */\n\n  Events.on(['run.before', 'pause', 'destroy', 'swipe.start', 'update'], function () {\n    Autoplay.stop();\n  });\n  /**\n   * Start autoplaying:\n   * - after each run, to restart autoplaying\n   * - on playing via API\n   * - while ending a swipe\n   */\n\n  Events.on(['run.after', 'play', 'swipe.end'], function () {\n    Autoplay.start();\n  });\n  /**\n   * Remount autoplaying:\n   * - on updating via API to reset interval that may changed\n   */\n\n  Events.on('update', function () {\n    Autoplay.mount();\n  });\n  /**\n   * Destroy a binder:\n   * - on destroying glide instance to clearup listeners\n   */\n\n  Events.on('destroy', function () {\n    Binder.destroy();\n  });\n  return Autoplay;\n}\n/**\n * Sorts keys of breakpoint object so they will be ordered from lower to bigger.\n *\n * @param {Object} points\n * @returns {Object}\n */\n\n\nfunction sortBreakpoints(points) {\n  if (isObject(points)) {\n    return sortKeys(points);\n  } else {\n    warn('Breakpoints option must be an object');\n  }\n\n  return {};\n}\n\nfunction Breakpoints(Glide, Components, Events) {\n  /**\n   * Instance of the binder for DOM Events.\n   *\n   * @type {EventsBinder}\n   */\n  var Binder = new EventsBinder();\n  /**\n   * Holds reference to settings.\n   *\n   * @type {Object}\n   */\n\n  var settings = Glide.settings;\n  /**\n   * Holds reference to breakpoints object in settings. Sorts breakpoints\n   * from smaller to larger. It is required in order to proper\n   * matching currently active breakpoint settings.\n   *\n   * @type {Object}\n   */\n\n  var points = sortBreakpoints(settings.breakpoints);\n  /**\n   * Cache initial settings before overwritting.\n   *\n   * @type {Object}\n   */\n\n  var defaults = _extends({}, settings);\n\n  var Breakpoints = {\n    /**\n     * Matches settings for currectly matching media breakpoint.\n     *\n     * @param {Object} points\n     * @returns {Object}\n     */\n    match: function match(points) {\n      if (typeof window.matchMedia !== 'undefined') {\n        for (var point in points) {\n          if (points.hasOwnProperty(point)) {\n            if (window.matchMedia('(max-width: ' + point + 'px)').matches) {\n              return points[point];\n            }\n          }\n        }\n      }\n\n      return defaults;\n    }\n  };\n  /**\n   * Overwrite instance settings with currently matching breakpoint settings.\n   * This happens right after component initialization.\n   */\n\n  _extends(settings, Breakpoints.match(points));\n  /**\n   * Update glide with settings of matched brekpoint:\n   * - window resize to update slider\n   */\n\n\n  Binder.on('resize', window, throttle(function () {\n    Glide.settings = mergeOptions(settings, Breakpoints.match(points));\n  }, Glide.settings.throttle));\n  /**\n   * Resort and update default settings:\n   * - on reinit via API, so breakpoint matching will be performed with options\n   */\n\n  Events.on('update', function () {\n    points = sortBreakpoints(points);\n    defaults = _extends({}, settings);\n  });\n  /**\n   * Unbind resize listener:\n   * - on destroying, to bring markup to its initial state\n   */\n\n  Events.on('destroy', function () {\n    Binder.off('resize', window);\n  });\n  return Breakpoints;\n}\n\nvar COMPONENTS = {\n  // Required\n  Html: Html,\n  Translate: Translate,\n  Transition: Transition,\n  Direction: Direction,\n  Peek: Peek,\n  Sizes: Sizes,\n  Gaps: Gaps,\n  Move: Move,\n  Clones: Clones,\n  Resize: Resize,\n  Build: Build,\n  Run: Run,\n  // Optional\n  Swipe: Swipe,\n  Images: Images,\n  Anchors: Anchors,\n  Controls: Controls,\n  Keyboard: Keyboard,\n  Autoplay: Autoplay,\n  Breakpoints: Breakpoints\n};\n\nvar Glide$1 = function (_Core) {\n  inherits(Glide$$1, _Core);\n\n  function Glide$$1() {\n    classCallCheck(this, Glide$$1);\n    return possibleConstructorReturn(this, (Glide$$1.__proto__ || Object.getPrototypeOf(Glide$$1)).apply(this, arguments));\n  }\n\n  createClass(Glide$$1, [{\n    key: 'mount',\n    value: function mount() {\n      var extensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return get(Glide$$1.prototype.__proto__ || Object.getPrototypeOf(Glide$$1.prototype), 'mount', this).call(this, _extends({}, COMPONENTS, extensions));\n    }\n  }]);\n  return Glide$$1;\n}(Glide);\n\nexport default Glide$1;"],"sourceRoot":""}